// Code generated by sqlc. DO NOT EDIT.
// source: test.sql

package dao

import (
	"context"

	"github.com/google/uuid"
)

const createTest = `-- name: CreateTest :one
INSERT INTO tests (title, body) VALUES ($1, $2) RETURNING id, title, body, created_at, updated_at
`

type CreateTestParams struct {
	Title string `json:"title"`
	Body  string `json:"body"`
}

func (q *Queries) CreateTest(ctx context.Context, arg CreateTestParams) (Test, error) {
	row := q.db.QueryRowContext(ctx, createTest, arg.Title, arg.Body)
	var i Test
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTest = `-- name: DeleteTest :exec
UPDATE tests SET deleted_at = NOW() WHERE id = $1
`

func (q *Queries) DeleteTest(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTest, id)
	return err
}

const getTest = `-- name: GetTest :one
SELECT id, title, body, created_at, updated_at FROM tests WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetTest(ctx context.Context, id uuid.UUID) (Test, error) {
	row := q.db.QueryRowContext(ctx, getTest, id)
	var i Test
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTests = `-- name: ListTests :many
SELECT id, title, body, created_at, updated_at FROM tests WHERE deleted_at IS NULL
`

func (q *Queries) ListTests(ctx context.Context) ([]Test, error) {
	rows, err := q.db.QueryContext(ctx, listTests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Test
	for rows.Next() {
		var i Test
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Body,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTest = `-- name: UpdateTest :one
UPDATE tests SET title = $2, body = $3 WHERE id = $1 AND deleted_at IS NULL RETURNING id, title, body, created_at, updated_at
`

type UpdateTestParams struct {
	ID    uuid.UUID `json:"id"`
	Title string    `json:"title"`
	Body  string    `json:"body"`
}

func (q *Queries) UpdateTest(ctx context.Context, arg UpdateTestParams) (Test, error) {
	row := q.db.QueryRowContext(ctx, updateTest, arg.ID, arg.Title, arg.Body)
	var i Test
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

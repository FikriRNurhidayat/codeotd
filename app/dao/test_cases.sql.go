// Code generated by sqlc. DO NOT EDIT.
// source: test_cases.sql

package dao

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const countTestCases = `-- name: CountTestCases :one
SELECT COUNT(*)
FROM test_cases
WHERE deleted_at IS NULL
`

func (q *Queries) CountTestCases(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTestCases)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTestCase = `-- name: CreateTestCase :one
INSERT INTO test_cases (name, hidden, input, output, challenge_id) VALUES ($1, $2, $3, $4, $5) RETURNING id, name, hidden, input, output, challenge_id, created_at, updated_at
`

type CreateTestCaseParams struct {
	Name        string    `json:"name"`
	Hidden      bool      `json:"hidden"`
	Input       string    `json:"input"`
	Output      string    `json:"output"`
	ChallengeID uuid.UUID `json:"challenge_id"`
}

type CreateTestCaseRow struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Hidden      bool      `json:"hidden"`
	Input       string    `json:"input"`
	Output      string    `json:"output"`
	ChallengeID uuid.UUID `json:"challenge_id"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) CreateTestCase(ctx context.Context, arg CreateTestCaseParams) (CreateTestCaseRow, error) {
	row := q.db.QueryRowContext(ctx, createTestCase,
		arg.Name,
		arg.Hidden,
		arg.Input,
		arg.Output,
		arg.ChallengeID,
	)
	var i CreateTestCaseRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Hidden,
		&i.Input,
		&i.Output,
		&i.ChallengeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTestCase = `-- name: DeleteTestCase :exec
UPDATE test_cases SET deleted_at = NOW() WHERE id = $1
`

func (q *Queries) DeleteTestCase(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTestCase, id)
	return err
}

const getTestCase = `-- name: GetTestCase :one
SELECT id, name, hidden, input, output, challenge_id, created_at, updated_at
FROM test_cases
WHERE id = $1
AND deleted_at IS NULL
`

type GetTestCaseRow struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Hidden      bool      `json:"hidden"`
	Input       string    `json:"input"`
	Output      string    `json:"output"`
	ChallengeID uuid.UUID `json:"challenge_id"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) GetTestCase(ctx context.Context, id uuid.UUID) (GetTestCaseRow, error) {
	row := q.db.QueryRowContext(ctx, getTestCase, id)
	var i GetTestCaseRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Hidden,
		&i.Input,
		&i.Output,
		&i.ChallengeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listExposedTestCases = `-- name: ListExposedTestCases :many
SELECT id, name, hidden, input, output, challenge_id, created_at, updated_at
FROM test_cases
WHERE challenge_id = $1
AND hidden IS FALSE
AND deleted_at IS NULL
LIMIT $2
OFFSET $3
`

type ListExposedTestCasesParams struct {
	ChallengeID uuid.UUID `json:"challenge_id"`
	Limit       int32     `json:"limit"`
	Offset      int32     `json:"offset"`
}

type ListExposedTestCasesRow struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Hidden      bool      `json:"hidden"`
	Input       string    `json:"input"`
	Output      string    `json:"output"`
	ChallengeID uuid.UUID `json:"challenge_id"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) ListExposedTestCases(ctx context.Context, arg ListExposedTestCasesParams) ([]ListExposedTestCasesRow, error) {
	rows, err := q.db.QueryContext(ctx, listExposedTestCases, arg.ChallengeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListExposedTestCasesRow
	for rows.Next() {
		var i ListExposedTestCasesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Hidden,
			&i.Input,
			&i.Output,
			&i.ChallengeID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listHiddenTestCases = `-- name: ListHiddenTestCases :many
SELECT id, name, hidden, input, output, challenge_id, created_at, updated_at
FROM test_cases
WHERE challenge_id = $1
AND hidden IS TRUE
AND deleted_at IS NULL
LIMIT $2
OFFSET $3
`

type ListHiddenTestCasesParams struct {
	ChallengeID uuid.UUID `json:"challenge_id"`
	Limit       int32     `json:"limit"`
	Offset      int32     `json:"offset"`
}

type ListHiddenTestCasesRow struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Hidden      bool      `json:"hidden"`
	Input       string    `json:"input"`
	Output      string    `json:"output"`
	ChallengeID uuid.UUID `json:"challenge_id"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) ListHiddenTestCases(ctx context.Context, arg ListHiddenTestCasesParams) ([]ListHiddenTestCasesRow, error) {
	rows, err := q.db.QueryContext(ctx, listHiddenTestCases, arg.ChallengeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListHiddenTestCasesRow
	for rows.Next() {
		var i ListHiddenTestCasesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Hidden,
			&i.Input,
			&i.Output,
			&i.ChallengeID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTestCases = `-- name: ListTestCases :many
SELECT id, name, hidden, input, output, challenge_id, created_at, updated_at
FROM test_cases
WHERE challenge_id = $1
AND deleted_at IS NULL
LIMIT $2
OFFSET $3
`

type ListTestCasesParams struct {
	ChallengeID uuid.UUID `json:"challenge_id"`
	Limit       int32     `json:"limit"`
	Offset      int32     `json:"offset"`
}

type ListTestCasesRow struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Hidden      bool      `json:"hidden"`
	Input       string    `json:"input"`
	Output      string    `json:"output"`
	ChallengeID uuid.UUID `json:"challenge_id"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) ListTestCases(ctx context.Context, arg ListTestCasesParams) ([]ListTestCasesRow, error) {
	rows, err := q.db.QueryContext(ctx, listTestCases, arg.ChallengeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTestCasesRow
	for rows.Next() {
		var i ListTestCasesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Hidden,
			&i.Input,
			&i.Output,
			&i.ChallengeID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTestCase = `-- name: UpdateTestCase :one
UPDATE test_cases SET name = $2, hidden = $3, input = $4, output = $5, updated_at = NOW() WHERE id = $1 AND deleted_at IS NULL RETURNING id, name, hidden, input, output, challenge_id, created_at, updated_at
`

type UpdateTestCaseParams struct {
	ID     uuid.UUID `json:"id"`
	Name   string    `json:"name"`
	Hidden bool      `json:"hidden"`
	Input  string    `json:"input"`
	Output string    `json:"output"`
}

type UpdateTestCaseRow struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Hidden      bool      `json:"hidden"`
	Input       string    `json:"input"`
	Output      string    `json:"output"`
	ChallengeID uuid.UUID `json:"challenge_id"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) UpdateTestCase(ctx context.Context, arg UpdateTestCaseParams) (UpdateTestCaseRow, error) {
	row := q.db.QueryRowContext(ctx, updateTestCase,
		arg.ID,
		arg.Name,
		arg.Hidden,
		arg.Input,
		arg.Output,
	)
	var i UpdateTestCaseRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Hidden,
		&i.Input,
		&i.Output,
		&i.ChallengeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

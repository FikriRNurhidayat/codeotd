// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dao "github.com/fikrirnurhidayat/codeotd/app/dao"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Querier is an autogenerated mock type for the Querier type
type Querier struct {
	mock.Mock
}

// CountChallenges provides a mock function with given fields: ctx
func (_m *Querier) CountChallenges(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountTestCases provides a mock function with given fields: ctx
func (_m *Querier) CountTestCases(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateChallenge provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateChallenge(ctx context.Context, arg dao.CreateChallengeParams) (dao.CreateChallengeRow, error) {
	ret := _m.Called(ctx, arg)

	var r0 dao.CreateChallengeRow
	if rf, ok := ret.Get(0).(func(context.Context, dao.CreateChallengeParams) dao.CreateChallengeRow); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(dao.CreateChallengeRow)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dao.CreateChallengeParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTestCase provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateTestCase(ctx context.Context, arg dao.CreateTestCaseParams) (dao.CreateTestCaseRow, error) {
	ret := _m.Called(ctx, arg)

	var r0 dao.CreateTestCaseRow
	if rf, ok := ret.Get(0).(func(context.Context, dao.CreateTestCaseParams) dao.CreateTestCaseRow); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(dao.CreateTestCaseRow)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dao.CreateTestCaseParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteChallenge provides a mock function with given fields: ctx, id
func (_m *Querier) DeleteChallenge(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTestCase provides a mock function with given fields: ctx, id
func (_m *Querier) DeleteTestCase(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetChallenge provides a mock function with given fields: ctx, id
func (_m *Querier) GetChallenge(ctx context.Context, id uuid.UUID) (dao.GetChallengeRow, error) {
	ret := _m.Called(ctx, id)

	var r0 dao.GetChallengeRow
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) dao.GetChallengeRow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(dao.GetChallengeRow)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTestCase provides a mock function with given fields: ctx, id
func (_m *Querier) GetTestCase(ctx context.Context, id uuid.UUID) (dao.GetTestCaseRow, error) {
	ret := _m.Called(ctx, id)

	var r0 dao.GetTestCaseRow
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) dao.GetTestCaseRow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(dao.GetTestCaseRow)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChallenges provides a mock function with given fields: ctx, arg
func (_m *Querier) ListChallenges(ctx context.Context, arg dao.ListChallengesParams) ([]dao.ListChallengesRow, error) {
	ret := _m.Called(ctx, arg)

	var r0 []dao.ListChallengesRow
	if rf, ok := ret.Get(0).(func(context.Context, dao.ListChallengesParams) []dao.ListChallengesRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dao.ListChallengesRow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dao.ListChallengesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListExposedTestCases provides a mock function with given fields: ctx, arg
func (_m *Querier) ListExposedTestCases(ctx context.Context, arg dao.ListExposedTestCasesParams) ([]dao.ListExposedTestCasesRow, error) {
	ret := _m.Called(ctx, arg)

	var r0 []dao.ListExposedTestCasesRow
	if rf, ok := ret.Get(0).(func(context.Context, dao.ListExposedTestCasesParams) []dao.ListExposedTestCasesRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dao.ListExposedTestCasesRow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dao.ListExposedTestCasesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHiddenTestCases provides a mock function with given fields: ctx, arg
func (_m *Querier) ListHiddenTestCases(ctx context.Context, arg dao.ListHiddenTestCasesParams) ([]dao.ListHiddenTestCasesRow, error) {
	ret := _m.Called(ctx, arg)

	var r0 []dao.ListHiddenTestCasesRow
	if rf, ok := ret.Get(0).(func(context.Context, dao.ListHiddenTestCasesParams) []dao.ListHiddenTestCasesRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dao.ListHiddenTestCasesRow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dao.ListHiddenTestCasesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTestCases provides a mock function with given fields: ctx, arg
func (_m *Querier) ListTestCases(ctx context.Context, arg dao.ListTestCasesParams) ([]dao.ListTestCasesRow, error) {
	ret := _m.Called(ctx, arg)

	var r0 []dao.ListTestCasesRow
	if rf, ok := ret.Get(0).(func(context.Context, dao.ListTestCasesParams) []dao.ListTestCasesRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dao.ListTestCasesRow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dao.ListTestCasesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateChallenge provides a mock function with given fields: ctx, arg
func (_m *Querier) UpdateChallenge(ctx context.Context, arg dao.UpdateChallengeParams) (dao.UpdateChallengeRow, error) {
	ret := _m.Called(ctx, arg)

	var r0 dao.UpdateChallengeRow
	if rf, ok := ret.Get(0).(func(context.Context, dao.UpdateChallengeParams) dao.UpdateChallengeRow); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(dao.UpdateChallengeRow)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dao.UpdateChallengeParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTestCase provides a mock function with given fields: ctx, arg
func (_m *Querier) UpdateTestCase(ctx context.Context, arg dao.UpdateTestCaseParams) (dao.UpdateTestCaseRow, error) {
	ret := _m.Called(ctx, arg)

	var r0 dao.UpdateTestCaseRow
	if rf, ok := ret.Get(0).(func(context.Context, dao.UpdateTestCaseParams) dao.UpdateTestCaseRow); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(dao.UpdateTestCaseRow)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dao.UpdateTestCaseParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
